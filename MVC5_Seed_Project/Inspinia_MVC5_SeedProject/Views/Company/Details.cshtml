@{
    ViewBag.Title = "Details";
}
<input type="hidden" id="companyId" value="@ViewBag.companyId" />
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Details</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Details</strong>
            </li>
        </ol>
    </div>
</div>


<style>
    .carouselContainer {
        overflow: visible;
        //height:350px;
    }

        .carouselContainer img {
            // height: 350px;
            height: auto;
            width: 100%;
        }
</style>

<div class="wrapper wrapper-content animated fadeInRight">

    <div class="row">

        <div class="col-sm-9" id="adsBinding">
            <div data-bind="visible:error()" class="alert alert-success">
                <strong>Error! </strong><span data-bind="text:error"></span>
            </div>
            <div data-bind="foreach: showPage">
                <div data-bind="visible:statusError" class="alert alert-success">
                    <strong>Pending admin approval! </strong><span data-bind="text:statusError"></span>
                </div>
                <div class="row">
                    <div class="col-sm-9">

                        <div data-bind="visible:!isPageEditing()">
                            <span data-bind="visible:loginUserId == createdBy">
                                <a data-bind="click: function(){return deletePage(id)}" class="btn btn-white btn-xs pull-right "> Delete</a><a data-bind="click: function(){return editPage(id)}" class="btn btn-white btn-xs pull-right"> Edit</a>
                            </span>
                            <h2 data-bind="text:title" class="font-bold m-b-xs"></h2>
                            <p data-bind="text:shortAbout"></p>
                        </div>
                        <div data-bind="visible:isPageEditing()">
                            <h2 class="font-bold m-b-xs">Company Name:<input type="text" placeholder="Company Name" class="form-control" data-bind="value:title" required /> </h2>
                            one line description:<input type="text" class="form-control" placeholder="One line description of company" data-bind="value:shortAbout" required />
                            Details:<textarea class="msgTextArea form-control" placeholder="Add company Details.." data-bind="jqAutoresize: {},value:longAbout"></textarea>
                            <button class="btn btn-primary" data-bind="click:updatePage">Update</button>
                        </div>
                        <div class="">

                        </div>
                    </div>
                    <div class="col-sm-3">
                        <img src="~/Images/profile.jpg" />
                    </div>
                </div>
                <div class="">
                    Overview discussion Gallery
                </div>
                <div class="row">
                    <div class="col-sm-9">
                        <h2>Location</h2>
                        <h3>HeadOffice</h3>
                        <div data-bind="visible:!isLocationEditing()">
                            <span data-bind="visible:loginUserId == createdBy">
                                <a data-bind="click: function(){return editLocation(id)}" class="btn btn-white btn-xs pull-right"> Edit</a>
                            </span>
                            <span data-bind="if:exectLocation">
                                <span data-bind="text:exectLocation"></span>,
                            </span>
                            <span data-bind="if:popularPlace">
                                <span data-bind="text:popularPlace"></span>,
                            </span>
                            <span data-bind="text:cityName"></span>
                            <span data-bind="if:!exectLocation, click:editLocation">add location</span>
                        </div>
                        <div data-bind="visible:isLocationEditing()">
                            <div class="form-group">
                                <label class="control-label col-md-2">City</label>
                                <div class="col-md-10">
                                    <select id="select-city" class="demo-default" name="city" data-bind="options: availableCities,
                       value: cityName,
                       optionsCaption: 'Choose City...'"></select>

                                </div>
                            </div>
                            <div data-bind="with:cityName">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Famous Place</label>
                                    <div class="col-md-10">
                                        <select id="select-popularPlace" class="demo-default" name="popularPlace" data-bind="options: $parent.availablePopularPlaces,
                       value: $parent.popularPlace,
                       optionsCaption: 'Choose Famous place...'"></select>
                                    </div>
                                </div>
                            </div>
                            <div data-bind="with:popularPlace">
                                <div class="form-group">
                                    <label class="control-label col-md-2">Exect location</label>
                                    <div class="col-md-10">
                                        <input type="text" class="form-control" name="exectLocation" />
                                    </div>
                                </div>
                            </div>
                            <button data-bind="click:updatePage">Submit</button>
                        </div>
                        @*<p data-bind="text:longAbout"></p>
                            facebook link, tw , website*@

                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-3">abc def</div>

    </div>

</div>

@Html.Partial("/Views/Shared/_Chat.cshtml")
@Html.Partial("~/Views/Shared/_UserLogin.cshtml")

@section Styles {
    @Styles.Render("~/plugins/slickStyles")
    @Styles.Render("~/plugins/slickThemeStyles")
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/jsTree")
    @Styles.Render("~/plugins/sweetAlertStyles")
@Styles.Render("~/scripts/selectizeStyles")
}


@section Scripts{
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/timeago")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/slick")
    @Scripts.Render("~/plugins/jsTree")
    @Scripts.Render("~/bundles/categoryTree")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/sweetAlert")
@Scripts.Render("~/scripts/selectize")
    <script src="~/Scripts/jquery.signalR-2.2.0.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/UserLogin.js"></script>
    <script src="~/Scripts/app/chat.js"></script>
    <script src="~/Scripts/_Comments.js"></script>
    <script>
        var myCompanyId = $("#companyId").val();
        
        function Location(data) {
            var self = this;
            data = data || {};
            self.cityId = data.cityId;
            self.cityName = data.cityName;
            self.popularPlaceId = data.popularPlaceId;
            self.popularPlace = data.popularPlace;
            self.exectLocation = data.exectLocation;
        }
        var imageUrls = [];
        function adImages(data, adId, imagesCount) {
            var self = this;
            data = data || {};
            self.link = "/Images/Ads/" + adId + '_' + imagesCount + data.imageExtension;// also loop after _
            imageUrls.push(self.link);
        }
        function Tag(data) {
            var self = this;
            data = data || {};
            self.id = data.id;
            self.name = data.name;
            self.info = data.info || "";
            self.followers = data.followers || 0;
        };
        function Company(data) {
            var self = this;
            //slick
            self.images = ko.observableArray(imageUrls);
            self.options = {};
            self.imageIndex = ko.observable(1);

            data = data || {};
            self.title = ko.observable( data.title);
            self.shortAbout = ko.observable(data.shortAbout);
            self.longAbout = ko.observable(data.longAbout);
            self.contactNo1 = ko.observable(data.contactNo1);
            self.contactNo2 = ko.observable(data.contactNo2);
            self.email = ko.observable(data.email);
            self.fblink = ko.observable(data.fblink);
            self.websitelink = ko.observable(data.websitelink);
            self.twlink = ko.observable(data.twlink);
            self.owner = ko.observable(data.owner);
            self.logoExtension = data.logoExtension;

            self.createdByName = data.createdByName;
            self.createdBy = data.createdById;
            self.id = data.id;
            self.since = data.since;
            self.time = data.time;
            self.friendlyTime = getTimeAgo(data.time);
            self.loginUserId = data.loginUserId || "";
            self.loginUserProfileLink = '/Images/Users/p' + self.loginUserId + data.loginUserProfileExtension;
            
            self.cityId = data.cityId;
            self.cityName =ko.observable( data.cityName );
            self.popularPlaceId = data.popularPlaceId;
            self.popularPlace = ko.observable( data.popularPlace);
            self.exectLocation = data.exectLocation;
            self.category = data.category;
            self.showLocation = ko.observable(); // for branches
              
            self.isReported = ko.observable(data.isReported);
            self.isSaved = ko.observable(data.isSaved);
            self.reportedCount = ko.observable(data.reportedCount);
            self.showImages = ko.observable();
            self.views = data.views;
            self.savedCount = ko.observable(data.savedCount);
            self.statusError = "";
            self.isVisible = true;
            self.status = data.status;
            if (data.status == "p") {
                self.statusError = "This ad will be visible to public once it is approved by admin";
                if (self.loginUserId != self.postedById) {
                    self.isVisible = false;
                }
            }
            
            self.isPageEditing = ko.observable(false);
            self.isLocationEditing = ko.observable(false);

            //location
            self.availableCities = ko.observableArray();
            self.availablePopularPlaces = ko.observableArray();
            self.loadCities = function () {
                $.ajax({
                    url: '/api/Location/GetCities',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableCities.push(item) });
                        $('#select-city').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 39,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },

                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Cities.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadPopularPlaces = function () {
                self.availablePopularPlaces.removeAll();
                $.ajax({
                    url: '/api/Location/GetPopularPlaces?city=' + self.cityName(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'GET',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availablePopularPlaces.push(item) });
                        $('#select-popularPlace').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 49,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Famous Places.Please refresh page and try again", "Error");
                    }
                });
            }
            
            var sub = self.cityName.subscribe(function (value) {
                self.loadPopularPlaces();
            });

            if (data.location != null) {
                self.showLocation(new Location(data.location));
            }
            
            if (data.adTags != null) {
                var tags = $.map(data.adTags, function (item) { return new Tag(item); });
                self.showTags(tags);
            }

            
            
            if (data.adImages) {
                var imagesCount = 1;
                var img = $.map(data.adImages, function (item, ia) { return new adImages(item, data.id, imagesCount++); });
                self.showImages(img);
            }
            self.editLocation = function () {
                self.loadCities();
                self.isLocationEditing(true);
            }
            
            self.updatePage = function (page) {
                $.ajax({
                    url: '/api/Company/UpdatePage/',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    data: ko.toJSON(page),
                    success: function (data) {
                        self.isPageEditing(false);
                        self.isLocationEditing(false);
                    },
                    error: function () {
                        toastr.error("failed to update Info", "Error!");
                    }
                });
            }
            self.saveAd = function (ad) {
                $.ajax({
                    url: '/api/User/SaveAd/' + ad.id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        self.savedCount(data.count);
                        if (data.text == "Deleted") {
                            self.isSaved(false);

                        } else {
                            self.isSaved(true);
                        }
                    },
                    error: function () {
                        toastr.error("failed to Save Ad. Please refresh page and try again", "Error!");
                    }
                });
            }
            self.editPage = function (id) {
                self.isPageEditing(true);
            }
            self.deletePage = function (id) {
                swal({
                    title: "Are you sure?",
                    text: "You will not be able to recover this Ad!",
                    type: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#DD6B55",
                    confirmButtonText: "Yes, delete it!",
                    closeOnConfirm: false
                }, function () {
                    $.ajax({
                        url: '/api/Electronic/DeleteAd/' + id,
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        success: function (data) {
                            swal("Deleted!", "Your Ad has been deleted.", "success");
                            window.location.href = "/User/Index/" + self.loginUserId;
                        },
                        error: function () {
                            toastr.error("failed to delete Ad. Please refresh page and try again", "Error!");
                        }
                    });
                });
            }
            self.deleteComment = function (id) {
                $.ajax({
                    url: '/api/Comment/DeleteComment/' + id,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    // data: ko.toJSON(id),
                    success: function (data) {
                        self.showComment.remove(function (item) {
                            return item.id == id;
                        });
                    },
                    error: function () {
                        toastr.error("failed to delete comment", "Error!");
                    }
                });
            }

            self.checkEnter = function (d, e) {
                if (e.keyCode == 13) {
                    self.addcomment();
                }
            }
            //self.commentsHub.client.appendCommentToMe = function (com) {
            //    self.showComment.push(new comment(com));
            //    self.newComment('');
            //}
            self.newComment = ko.observable();
            self.addcomment = function () {
                if (self.loginUserId) {
                    var com = new comment();
                    com.adId = self.id;
                    com.description(self.newComment());
                    com.description(com.description().slice(0, -1));
                    if (com.description() != null && com.description().trim() != "") {
                        com.time = new Date($.now());
                        com.description = com.description().slice(0, -1);
                        //self.commentsHub.server.addComment(com).fail(function (err) { toastr.error("failed to post comment ", "Error!"); });
                        $.ajax({
                            url: '/api/Comment/PostComment',
                            dataType: "json",
                            contentType: "application/json",
                            cache: false,
                            type: 'POST',
                            data: ko.toJSON(com),
                            success: function (data) {
                                self.showComment.push(new comment(data));
                                self.newComment('');
                            },
                            error: function (jqXHR, status, thrownError) {
                                toastr.error("failed to post comment", "Error");
                            }
                        });
                    }
                } else {
                    //show modal
                    toastr.info("You must be login to post comment", "Oops!");
                }
            }

        }
        function Report() {
            var self = this;
            self.selectedVal = ko.observable("spam");
            self.reportText = "";
            self.report = function () {
                if ($("#loginUserId").val()) {
                    var data = {
                        adId: myAdId,
                        details: self.reportText,
                        type: self.selectedVal(),
                    };
                    $.ajax({
                        url: '/api/Electronic/reportAd',
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        data: ko.toJSON(data),
                        success: function (data) {
                            $("#report").modal('hide');
                            toastr.info("Our team can contact you for details", "Thanks for feedback!");
                        },
                        error: function (xhr, status, error) {
                            var err = eval("(" + xhr.responseText + ")");
                            toastr.info(err.Message);
                            $("#report").modal('hide');
                        }
                    })
                } else {
                    toastr.info("You must be login to report this ad", "Na na!");
                }
            }
        }
        function viewModel() {
            var self = this;
            treeModel();
            AccountViewModel();
            ChatViewModel();
            Report();
            //initillizing hub
           // self.commentsHub = $.connection.adComments;
            self.showPage = ko.observable();
            self.error = ko.observable();
            self.loadPage = function () {
                var companyId = myCompanyId;
                url_address = '/api/Company/GetPage/' + companyId;
                $.ajax({
                    url: url_address,
                    dataType: "json",
                    type: 'GET'
                })
                .done(function (data) {
                    var mappedads = $.map(data, function (item) { return new Company(item); });
                    self.showPage(mappedads);
                })
                .fail(function () {
                    self.error("This Business Page has been deleted or is unavailable. ");
                });
            }

            self.loadPage();
            return self;
        }

        function getTimeAgo(varDate) {
            if (varDate) {
                return $.timeago(varDate.toString().slice(-1) == 'Z' ? varDate : varDate + 'Z');
            }
            else {
                return '';
            }
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        Selectize.define('inputMaxlength', function (options) {
            var self = this;
            this.setup = (function () {
                var original = self.setup;
                return function () {
                    original.apply(this, arguments);
                    this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                };
            })();
        });
        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };
        ko.bindingHandlers.slick = (function () {
            var createImageDiv = function (imgUrl) {

                $a = $('<a>');
                $a.attr('href', imgUrl);
                //$a.attr('data-gallery', '#blueimp-gallery');
                $a.attr('target', '_blank');
                $div = $('<div>');
                $image = $('<img>');
                $image.attr('src', imgUrl);
                // $div.append($image);
                $a.append($image);
                $div.append($a);
                return $div;
            };

            // Initializes the carousel
            var init = function (element, valueAccessor, allBindingsAccessor) {
                // Clears the div
                $(element).empty();
                // Creates the inner divs with images
                var images = ko.unwrap(valueAccessor());
                if (images) {
                    images.forEach(function (imgUrl) {
                        $(element).append(createImageDiv(imgUrl));
                    });
                }

                // try to recover slickOptions
                var options = allBindingsAccessor().slickOptions || {};

                // Initialize slick on the div, with provided options
                $(element).slick(options);

                //handle disposal, if KO removes the element
                ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                    $(element).slick('unslick');
                });

                // check if there is slickIndex
                var slickIndex = allBindingsAccessor().slickIndex;
                if (slickIndex) {
                    $(element).slick('slickGoTo', ko.unwrap(slickIndex));
                }
                // If it's obervable, subscribe to its changes
                if (ko.isObservable(slickIndex)) {
                    slickIndex.subscribe(function (idx) {
                        $(element).slick('slickGoTo', idx);
                    });
                }
                // It if's writable observable, update when slick current index changes
                if (ko.isWritableObservable(slickIndex)) {
                    $(element).on('afterChange', function (evt, slick, pos) {
                        slickIndex(pos);
                    })
                }

                // Check if the array of images is an observable array
                var imagesArray = valueAccessor();
                // If it's observable array, subscribe to changes
                if (ko.isObservable(imagesArray) && 'destroyAll' in imagesArray) {
                    imagesArray.subscribe(function (changes) {
                        console.log(changes);
                        if (changes) {
                            changes.forEach(function (change) {
                                if (change.status == 'added') {
                                    // Add new img div at index
                                    var imgDiv = createImageDiv(change.value)[0];
                                    var index = change.index;
                                    var slideCount = $(element).slick('getSlick').slideCount;
                                    // if the index is out of range (which can happen
                                    // with push, and splice), include at the end
                                    var addBefore = true;
                                    if (index >= slideCount) {
                                        index = slideCount - 1;
                                        addBefore = false;
                                    }
                                    $(element).slick('slickAdd', imgDiv, index, addBefore);
                                } else if (change.status == 'deleted') {
                                    // delete img div at index
                                    $(element).slick('slickRemove', change.index);
                                }
                            });
                        }
                    }, null, 'arrayChange');
                } // if observable array
            }

            //update the control when the view model changes
            var update = function (element, valueAccessor) {
                var images = ko.unwrap(valueAccessor());
                // Do something to update the content
                console.log('update');
            }

            return { init: init, update: update };
        })();

        $(function () {

            toastr.options = {
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                positionClass: 'toast-top-right',
                onclick: null
            };
            ko.applyBindings(new viewModel());
            $.connection.hub.start().done();
        });

    </script>
}
