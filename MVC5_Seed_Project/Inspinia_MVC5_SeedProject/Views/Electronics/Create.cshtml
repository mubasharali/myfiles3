@model Inspinia_MVC5_SeedProject.Models.Ad

@{
    ViewBag.Title = "Create";
}

@*@if (TempData["error"] != null)
{
   <input type="hidden" id="tempdataError" value="@TempData["error"]" />
}
else
{
    <input type="hidden" id="tempdataError" value="" />
}*@
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Create</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Create</strong>
            </li>
        </ol>
    </div>
    <div class="col-sm-8">
        <div class="title-action">
			@Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary"})
        </div>
    </div>
</div>


<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-md-6">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Create Ad</h5>
                </div>
                <div class="ibox-content">

				@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "form"}))
                {
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        <div class="form-group">
            <label class="control-label col-md-2">Select Brand</label>
            <div class="col-md-10">
                <select id="select-brand" required class="demo-default" name="brand" data-bind="options: availableBrands,
                       value: selectedBrand,
                       optionsCaption: 'Choose brand...'"></select>
                @*<div data-bind="visible:isNewBrand()">
                    You have entered new Brand. Now enter you model name also as we don't have list of models for '<span data-bind="text:selectedBrand"></span>' Brand.<br /><b>Note:</b>Your ad will first verified by admin. 
                </div>*@
            </div>
        </div>
        @*<span data-bind="text: selectedBrand() ? selectedBrand(): 'unknown'"></span>*@
        <div data-bind="with:selectedBrand">
            <div class="form-group">
                <label class="control-label col-md-2">Select Model</label>
                <div class="col-md-10">
                    <select id="select-model" required class="demo-default" name="model" data-bind="options: $parent.availableModels,
                       value: $parent.selectedModel,
                       optionsCaption: 'Choose model...'"></select>
                </div>
                @*<div data-bind="text:$parent.selectedModel"></div>*@
            </div>
        </div>  
        <div class="form-group">
            <label class="control-label col-md-2">Title</label>
            <div class="col-md-10">
                <input type="text" class="form-control" name="title" value="@Model.title" />
            </div>
        </div>

        
        <div class="form-group">
            <label class="control-label col-md-2">Color</label>
            <div class="col-md-10">
                <select id="select-color" name="color" required placeholder="choose color">
                    <option value="">Choose color</option>
                    <option value="white">White</option>
                    <option value="Black">Black</option>
                    <option value="Yellow">Yellow</option>
                    <option value="Red">Red</option>
                    <option value="Blue">Blue</option>
                    <option value="Orange">Orange</option>
                    <option value="Purple">Purple</option>
                    <option value="Violet">Violet</option>
                    <option value="Green">Green</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label class="control-label col-md-2">Number of sims</label>
            <div class="col-md-10">
                <select id="select-sims" name="sims" required placeholder="choose sims">
                    <option value="">Choose sims</option>
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                    <option value="4">4</option>
                    <option value="5">5</option>
                </select>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label">Condition</label>
            <div class="col-sm-10">
                <div class="radio">
                    <label>
                        <input class="radio i-checks" type="radio" data-bind="iCheck: { checked: conditionChecked }" name="condition" value="new" required /> New
                    </label>
                </div>
                <div class="radio">
                    <label>
                        <input class="radio i-checks" type="radio" data-bind="iCheck: { checked: conditionChecked }" name="condition" value="used"  required/> Used
                    </label>
                </div>
                <div class="radio">
                    <label>
                        <input class="radio i-checks" type="radio" data-bind="iCheck: { checked: conditionChecked }" name="condition" value="unboxed"  readonly/> unBoxed
                    </label>
                </div>
            </div>
        </div>
        <div class="form-group">
            <label class="col-sm-2 control-label">Choose <br /><small class="text-navy">Learn more</small></label>
            <div class="col-sm-10">
                <div class="radio">
                    <label>
                        <input class="radio i-checks" type="radio" data-bind="iCheck: { checked: selectedVal }" name="bidingAllowed" value="fixedPrice" required /> Fixed Price
                    </label>
                </div>
                <div class="radio">
                    <label>
                        <input class="radio i-checks" type="radio" data-bind="iCheck: { checked: selectedVal }" name="bidingAllowed" value="allowBiding" required /> Allow Biding
                    </label>
                </div>
            </div>
        </div>
        
    <div data-bind="visible:isFixPriceChecked()">
        <div class="form-group">
            <label class="control-label col-md-2">Price</label>
            <div class="col-md-10">
                <div class="input-group m-b">
                    <span class="input-group-addon">Rs</span><input type="number" class="form-control" pattern="[0-9]*" name="price" />
                </div>
                <div class="checkbox i-check"><label> <input type="checkbox" name="isNegotiable"><i></i> Negotiable</label></div>
            </div>

        </div>
    </div>
    <div data-bind="visible:isAllowBidingChecked()">
        <div class="form-group">
            <label class="control-label col-md-2">Biding starts from</label>
            <div class="col-md-10">
                <div class="input-group m-b">
                    <span class="input-group-addon">Rs</span><input type="number" class="form-control" pattern="[0-9]*" name="price" />
                </div>
            </div>

        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2">Description</label>
        <div class="col-md-10">
            <textarea class="form-control msgTextArea" data-bind=" jqAutoresize: {}" name="description">@Model.description</textarea>
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Create" class="btn btn-primary" />
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-white" })
        </div>
    </div>
    @*<input type="text" id="input-tags" value="" data-selectize-value="[awesome]" />*@

</div>
                }

        </div>
    </div>
        </div>
    </div>
 </div>



@section Styles {

    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/Scripts/plugins/jquery-ui/jqueryuiStyles")
@Styles.Render("~/scripts/selectizeStyles")
}

@section Scripts {

    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/validate")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/iCheck")
@Scripts.Render("~/scripts/selectize")
    @Scripts.Render("~/plugins/toastr")
@Scripts.Render("~/plugins/autosize")
    <script type="text/javascript">
        
        function ViewModel() {
            var self = this;
            self.conditionChecked = ko.observable(false);
            self.selectedVal = ko.observable();
            self.selectedVal.subscribe(function (val) {
                if (val == "fixedPrice") {
                    self.isAllowBidingChecked(false);
                    self.isFixPriceChecked(true);
                }
                else {
                    self.isAllowBidingChecked(true);
                    self.isFixPriceChecked(false);
                }
            });


            self.isNewBrand = ko.observable(false);
            self.availableBrands = ko.observableArray();
            self.selectedBrand = ko.observable();
            self.selectedModel = ko.observable();
            var sub = self.selectedBrand.subscribe(function (value) {
                self.loadModels();
            })
            self.isAllowBidingChecked = ko.observable(false);
            self.isFixPriceChecked = ko.observable(false);
            
            self.loadBrands = function () {
                $.ajax({
                    url: '/api/Electronic/GetBrands',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableBrands.push(item) });
                        $('#select-brand').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            option_add:newBrandAdded,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                            onOptionAdd: function (value, data) { self.isNewBrand(true);}
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Brands.Please refresh page and try again", "Error");
                    }
                });
            }
            function newBrandAdded() {
                alert("new ");
            }
            self.availableModels = ko.observableArray();
            self.selectedModel = ko.observable();
            self.loadModels = function () {
                self.availableModels.removeAll();
                $.ajax({
                    url: '/api/Electronic/GetModels?brand=' + self.selectedBrand(),
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        $.each((data), function (i, item) { self.availableModels.push(item) });
                        $('#select-model').selectize({
                            create: true,
                            plugins: ['inputMaxlength'],
                            inputMaxlength: 29,
                            sortField: {
                                field: 'text',
                                direction: 'asc'
                            },
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to load Models.Please refresh page and try again", "Error");
                    }
                });
            }
            self.loadBrands();
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };
        ko.bindingHandlers.iCheck = { // integrating icheck plugin using bh
            init: function (element, valueAccessor) {
                //initialize icheck to the element
                $(element).iCheck({
                    radioClass: 'iradio_square-green'
                });
                $(element).on('ifChecked', function (event) {
                    var observable = valueAccessor();
                    observable.checked(event.target.defaultValue); //assigning selected value
                });
            }
        };

        $(document).ready(function () {
            ko.applyBindings(new ViewModel);

            Selectize.define('inputMaxlength', function (options) {
                var self = this;
                this.setup = (function () {
                    var original = self.setup;
                    return function () {
                        original.apply(this, arguments);
                        this.$control_input.attr('maxlength', this.settings.inputMaxlength);
                    };
                })();
            });

            //$('#input-tags').selectize({
            //    persist: false,
            //    createOnBlur: true,
            //    create: true,
            //    maxItems: 4
            //});
            $('#select-color').selectize({
                create: true,
                plugins: ['inputMaxlength'],
                inputMaxlength: 19,
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $('#select-sims').selectize({
                sortField: {
                    field: 'text',
                    direction: 'asc'
                },
            });
            $("#form").validate({
                ignore: ':hidden:not([class~=selectized]),:hidden > .selectized, .selectize-control .selectize-input input',
                rules: {
                    title: {
                        required: true,
                        maxlength: 50,
                        minlength:15
                    },
                    company: {
                        required: true,
                        maxlength:15
                    },
                    model: {
                        required: true,
                        maxlength:20
                    },
                    description: {
                        required: true,
                        minlength: 25,
                        maxlength: 1000
                    },
                    color: {
                        required: true,
                        maxlength: 20
                    },
                    price: {
                        number: true
                    },
                    abc: {
                        required: true
                    }
                }
            });
            $('.i-check').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });

        });
</script>
    }

