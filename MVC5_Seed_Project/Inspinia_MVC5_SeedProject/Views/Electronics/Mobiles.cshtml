
@{
    ViewBag.Title = "Mobiles";
}

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>Mobiles</h2>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("List", "Index")
            </li>
            <li class="active">
                <strong>Mobiles</strong>
            </li>
        </ol>
    </div>
</div>



<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-sm-3">@Html.Partial("~/Views/Electronics/_TreeMobile.cshtml")
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                   Tags
                </div>
                <div class="ibox-content">
                    jakdljfalsdj
                </div>
            </div>
        </div>
        <div class="col-md-9 col-lg-6" id="ads">
            <div class="ibox float-e-margins">
                <div class="ibox-title">
                    <h5>Search</h5>
                </div>
                <div class="ibox-content">
                    <div data-bind="foreach:showAds">

                        <div data-bind="text:title"></div>
                        <span data-bind="if:!isBidingAllowed">
                            <span data-bind="if:price">
                                <span data-bind="text:price"></span> <small style="font-size:13px" class="text-muted">Rs. <span data-bind="html:isNegotiable"></span></small>
                            </span>
                            <span data-bind="if:!price">Price on contact</span>
                        </span>
                        <span data-bind="if:isBidingAllowed">
                            <span data-bind="if:price">
                                <span data-bind="if:highestBid() == '-Infinity'">
                                    <span data-bind="text:price"></span> <small style="font-size:13px" class="text-muted ">Rs. (Initial Bid) </small>
                                </span>
                                <span data-bind="ifnot:highestBid() == '-Infinity'">
                                    <span data-bind="text:highestBid"></span> <small style="font-size:13px" class="text-muted ">Rs. (current Bid) </small>
                                </span>
                            </span>
                            <span data-bind="if:!price">
                                <span data-bind="if:highestBid() == '-Infinity'">
                                    No Bit yet
                                </span>
                                <span data-bind="ifnot:highestBid() == '-Infinity'">
                                    <span data-bind="text:highestBid"></span> <small style="font-size:13px" class="text-muted ">Rs. (current Bid) </small>
                                </span>
                            </span>
                        </span>
                        <span data-bind="foreach:showTags">
                            <span class="btn btn-xs btn-white"  data-bind="text:name"></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-3"></div>
    </div>
 </div>

@section Styles {
    @Styles.Render("~/plugins/slickStyles")
    @Styles.Render("~/plugins/slickThemeStyles")
    @Styles.Render("~/plugins/toastrStyles")
    @Styles.Render("~/Content/plugins/jsTree")
}

@section Scripts{
    @Scripts.Render("~/plugins/toastr")
    @Scripts.Render("~/plugins/timeago")
    @Scripts.Render("~/plugins/autosize")
    @Scripts.Render("~/plugins/knockout")
    @Scripts.Render("~/plugins/slick")
    @Scripts.Render("~/plugins/jsTree")

    <script>
        function Tag(data) {
            var self = this;
            data = data || {};
            self.id = data.id;
            self.name = data.name;
        }
        function Bid(data) {
            var self = this;
            data = data || {};
            self.price = data.price;
        }
        function ad(data) {
            var self = this;
            data = data || {};
            self.title = data.title;
            self.description = ko.observable(data.description);
            self.postedByName = data.postedByName;
            self.postedById = data.postedById;
            self.id = data.id;
            self.time = getTimeAgo(data.time);
            self.loginUserId = data.islogin || "";
            self.showMobileAd = ko.observableArray();
            self.isReported = ko.observable(data.isReported);
            self.reportedCount = ko.observable(data.reportedCount);
            self.showImages = ko.observable();
            self.views = data.views;
            self.price = data.price || "";
            
            
            //biding
            self.highestBid = ko.observable();
            self.showBidings = ko.observableArray();
            self.isBidingAllowed = false;
            self.placeBid = ko.observable(false);
            self.bidAmount = ko.observable();

            self.showTags = ko.observableArray();

            self.sellerProfile = function () {
                window.location.href = "/User/Index/" + self.postedById;
            }
            
            if (data.isNegotiable == "b") {
                self.isBidingAllowed = true;
            } else if (data.isNegotiable == "y") {
                self.isNegotiable = 'Negotiable';
            } else if (data.isNegotiable == "n") {
                self.isNegotiable = '<strike>Negotiable</strike>';
            }
            if (self.price == "") {
                self.isNegotiable = "";
            }
            if (data.bid != null) {
                var biding = $.map(data.bid, function (item) { return new Bid(item); });
                self.highestBid(Math.max.apply(Math, data.bid.map(function (o) { return o.price; })));
                //self.showBidings(biding);
            }
            if (data.adTags != null) {
                var tags = $.map(data.adTags, function (item) { return new Tag(item); });
                self.showTags(tags);
            }

            //if (data.image) {
            //    var img = $.map(data.image, function (item) { return new adImages(item); });
            //    self.showImages(img);
            //}
            self.report = function (id, loginUserId) {
                if (loginUserId) {
                    $.ajax({
                        url: '/api/Electronic/reportAd?id=' + id,
                        dataType: "json",
                        contentType: "application/json",
                        cache: false,
                        type: 'POST',
                        success: function (data) {
                            self.isReported(true);
                            self.reportedCount(data);
                        },
                        error: function (xhr, status, error) {
                            var err = eval("(" + xhr.responseText + ")");
                            toastr.info(err.Message);
                        }
                    })
                } else {
                    toastr.info("You must be login to report this ad", "Na na!");
                }
            }
        }
        function Model(data) {
            var self = this;
            data = data || {};
            self.modelName = data.model;
            self.modelClicked = function () {
                alert("Model");
            }

        }
        function Company(data) {
            var self = this;
            data = data || {};
            self.companyName = data.companyName;
            self.showModels = ko.observableArray();
            if (data.models) {
                var models = $.map(data.models, function (item) { return new Model(item) });
                self.showModels(models);
            }
            self.companyClicked = function () {
                alert("company");
            }
        }
        
        
        function viewModel() {
            var self = this;
            self.brand = ko.observable("HTC");
            self.model = ko.observable("Desire")
            self.showAds = ko.observableArray();
            self.loadad = function () {
                url_address = '/api/Electronic/SearchMobileAds?brand=' + self.brand() + '&model='+ self.model();
                $.ajax({
                    url: url_address,
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        var mappedads = $.map(data, function (item) { return new ad(item); });
                        self.showAds(mappedads);

                    },
                    error: function () {
                        toastr.error("Unable to load data. Please try again", "Error");
                    }
                });

            }
            self.showCompanies = ko.observableArray();
            self.loadTree = function () {
                $.ajax({
                    url: '/api/Electronic/GetMobileTree',
                    dataType: "json",
                    contentType: "application/json",
                    cache: false,
                    type: 'POST',
                    success: function (data) {
                        var dat = $.map(data, function (item) { return new Company(item) });
                        self.showCompanies(dat);
                        $("#navigation").jstree({
                            "themes": {
                                "theme": "classic"
                            },
                            "core": {
                                "themes": {
                                    "icons": false
                                }
                            },
                            "plugins": ["search"]
                        });
                        var to = false;
                        $('#treeSearch').keyup(function () {
                            if (to) { clearTimeout(to); }
                            to = setTimeout(function () {
                                var v = $('#treeSearch').val();
                                $('#navigation').jstree(true).search(v);
                            }, 250);
                        });
                    },
                    error: function (jqXHR, status, thrownError) {
                        toastr.error("failed to laod category tree. Please refresh page", "Error");
                    }
                });
            }
            self.loadTree();
            self.loadad();
            return self;
        }
        //tree
        
        function getTimeAgo(varDate) {
            if (varDate) {
                return $.timeago(varDate.toString().slice(-1) == 'Z' ? varDate : varDate + 'Z');
            }
            else {
                return '';
            }
        }
        ko.bindingHandlers.jqAutoresize = {
            init: function (element, valueAccessor, aBA, vm) {
                if (!$(element).hasClass('msgTextArea')) {
                    $(element).css('height', '1em');
                }
                $(element).autosize();
            }
        };

        $(function () {
            toastr.options = {
                closeButton: true,
                progressBar: true,
                preventDuplicates: true,
                positionClass: 'toast-top-right',
                onclick: null
            };
            $('.product-images').slick({
                dots: true
            });
           // ko.applyBindings(new viewModel, (document.getElementById('ads')));

           // ko.applyBindings(new treeModel, document.getElementById('navigation'));
            ko.applyBindings(new viewModel);

        });

    </script>
    }










